se creo el proyecto inventario punto de venta con el comando => py -m django startproject "nombre"

para luego comenzar con la creación de las apps individuales con
python manage.py startapp //nombre app(firstapp)
para luego agregarlas al archivo de configuración del proyecto

se implento la configuración de lectura de static y templates, cada uno para leer
css/js y HTML con la inclusión de   'DIRS': [os.path.join(BASE_DIR, 'templates')],
y STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] en las configuraciónes del proyecto.

se implementaron las apps Home, homeAdmin, login, crudUsuarios, crudProductos, crudCategorias, CrudBodegas
crudEmpleados, cada uno con su propia url y configuración con su archivo template HTML que es cargado desde templates
por ejemplo las url de la app crudUsuarios, pasan a formar parte de las urls de homeAdmin.
se hizo uso de las etiquetas de django {%include y static%} para cargar archivos HTML, css y js.

se implento el uso de js para la confirmación de que la celdas de datos no queden vacías al verificar con el HTLM que llama a una función de js 
mediante una importación, el uso correcto de no dejar celdas vacías.

se implementaron HTML de formulario, vistas y tablas intermedias para manejar los datos correctamente 
por ejemplo en bodega y tener todos los datos.

se hizo uso de la función map mediante un join para que ciertos datos solo se puedan elegir si se crean antes, mediante la siguiente función por ejemplo:
        <label>Rut: </label>
        <select
        name="rutEmpleado"
        id="rutEmpleado">
        </select>
        <script>
            let empleados = JSON.parse(localStorage.getItem("empleadosA"))
            let datos = document.getElementById("rutEmpleado")
            datos.innerHTML = `<option value="">Elige el rut del usuario</option>`
            empleados.forEach(empleado => {
                let rut = `<option value="${empleado.rut}">${empleado.rut}</option>`
                datos.innerHTML += rut;
            }); 
        </script>
        
       recuperando datos mediante un document.getElementById("").
       
la mayoría de HTML y js recuperan datos mediante document.getElementById("") además de la integración de su valor con value.
guardando los datos en el local storage mediante PUSH en el js.

El login valida mendiate configuraciónes de que si entro como admin tiene acceso a ciertos valores mediante el Home al igual je bodeguero mediante un cargo que se Lee en el login.


